{
  "address": "0xa4719859191C480ef05C5e698F89d178dE3F3E32",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCOUNT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct EIP712.Account",
          "name": "account",
          "type": "tuple"
        }
      ],
      "name": "hashStruct",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "version_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct EIP712.Account",
          "name": "account",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdeb58136453c94fd5ad3045d024948c1f0e630c34f5fe7a60f70fbac7136b4e9",
  "receipt": {
    "to": null,
    "from": "0xB6C4d3ea2DB8c0f9FA49ab762Ff685a5D63723C8",
    "contractAddress": "0xa4719859191C480ef05C5e698F89d178dE3F3E32",
    "transactionIndex": 70,
    "gasUsed": "1238893",
    "logsBloom": "0x
    "blockHash": "0x42405f0f1890e7f3446185ffb8ec4a9ead966d8f7c7d4c2a43cd81e52ad09819",
    "transactionHash": "0xdeb58136453c94fd5ad3045d024948c1f0e630c34f5fe7a60f70fbac7136b4e9",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 8141801,
        "transactionHash": "0xdeb58136453c94fd5ad3045d024948c1f0e630c34f5fe7a60f70fbac7136b4e9",
        "address": "0xa4719859191C480ef05C5e698F89d178dE3F3E32",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 38,
        "blockHash": "0x42405f0f1890e7f3446185ffb8ec4a9ead966d8f7c7d4c2a43cd81e52ad09819"
      }
    ],
    "blockNumber": 8141801,
    "cumulativeGasUsed": "5001558",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c6e71d10e19624164bf9c0f57c9cd19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct EIP712.Account\",\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"hashStruct\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"version_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct EIP712.Account\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"contracts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract EIP712 is Initializable, OwnableUpgradeable {\\n    struct Account {\\n        string name;\\n        uint256 amount;\\n    }\\n\\n    bytes32 public constant ACCOUNT_TYPEHASH =\\n        keccak256(\\\"Account(string name,uint256 amount)\\\");\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    string public constant name = \\\"EIP712\\\";\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    string public version;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address initialOwner,\\n        uint256 chainId,\\n        string memory version_\\n    ) public initializer {\\n        __Ownable_init(initialOwner);\\n        version = version_;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function hashStruct(Account memory account) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ACCOUNT_TYPEHASH,\\n                    keccak256(bytes(account.name)),\\n                    account.amount\\n                )\\n            );\\n    }\\n\\n    function recoverSigner(\\n        Account memory account,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns (address) {\\n        bytes32 hash = hashStruct(account);\\n        bytes32 hash2 = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash)\\n        );\\n        return ecrecover(hash2, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x0c765050d62c4fb4fc96a5c9451b7f727f1494c0d0c5495cc4600695eea14685\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001f61002460201b60201c565b6101ab565b600061003461012860201b60201c565b90508060000160089054906101000a900460ff161561007f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101255767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161011c9190610190565b60405180910390a15b50565b60008061013961014260201b60201c565b90508091505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b600067ffffffffffffffff82169050919050565b61018a8161016d565b82525050565b60006020820190506101a56000830184610181565b92915050565b6114f8806101ba6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806354fd4d501161007157806354fd4d5014610156578063715018a614610174578063802708f51461017e57806381d60956146101ae5780638da5cb5b146101ca578063f2fde38b146101e8576100a9565b806304d41a81146100ae57806306fdde03146100de57806320606b70146100fc5780633003aa5c1461011a5780633644e51514610138575b600080fd5b6100c860048036038101906100c39190610bfa565b610204565b6040516100d59190610c5c565b60405180910390f35b6100e6610267565b6040516100f39190610cf6565b60405180910390f35b6101046102a0565b6040516101119190610c5c565b60405180910390f35b6101226102c4565b60405161012f9190610c5c565b60405180910390f35b6101406102e8565b60405161014d9190610c5c565b60405180910390f35b61015e6102ee565b60405161016b9190610cf6565b60405180910390f35b61017c61037c565b005b61019860048036038101906101939190610d7d565b610390565b6040516101a59190610e41565b60405180910390f35b6101c860048036038101906101c39190610e88565b610427565b005b6101d261066f565b6040516101df9190610e41565b60405180910390f35b61020260048036038101906101fd9190610ef7565b6106a7565b005b60007fb462ca2d10c33fd64fabd08be03d02973369ae65ed280324b0f5397012ac4165826000015180519060200120836020015160405160200161024a93929190610f33565b604051602081830303815290604052805190602001209050919050565b6040518060400160405280600681526020017f454950373132000000000000000000000000000000000000000000000000000081525081565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7fb462ca2d10c33fd64fabd08be03d02973369ae65ed280324b0f5397012ac416581565b60005481565b600180546102fb90610f99565b80601f016020809104026020016040519081016040528092919081815260200182805461032790610f99565b80156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b505050505081565b61038461072d565b61038e60006107b4565b565b60008061039c86610204565b905060008054826040516020016103b4929190611042565b604051602081830303815290604052805190602001209050600181878787604051600081526020016040526040516103ef9493929190611088565b6020604051602081039080840390855afa158015610411573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b600061043161088b565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561047f5750825b9050600060018367ffffffffffffffff161480156104b4575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156104c2575080155b156104f9576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156105495760018560000160086101000a81548160ff0219169083151502179055505b6105528861089f565b85600190816105619190611279565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600681526020017f45495037313200000000000000000000000000000000000000000000000000008152508051906020012060016040516105cf91906113ee565b604051809103902089306040516020016105ed959493929190611405565b6040516020818303038152906040528051906020012060008190555083156106655760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161065c91906114a7565b60405180910390a15b5050505050505050565b60008061067a6108b3565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6106af61072d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107215760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107189190610e41565b60405180910390fd5b61072a816107b4565b50565b6107356108db565b73ffffffffffffffffffffffffffffffffffffffff1661075361066f565b73ffffffffffffffffffffffffffffffffffffffff16146107b2576107766108db565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107a99190610e41565b60405180910390fd5b565b60006107be6108b3565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000806108966108e3565b90508091505090565b6108a761090e565b6108b08161094e565b50565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600033905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b6109166109d4565b61094c576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61095661090e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109c85760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109bf9190610e41565b60405180910390fd5b6109d1816107b4565b50565b60006109de61088b565b60000160089054906101000a900460ff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a5682610a0d565b810181811067ffffffffffffffff82111715610a7557610a74610a1e565b5b80604052505050565b6000610a886109f4565b9050610a948282610a4d565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610ac357610ac2610a1e565b5b610acc82610a0d565b9050602081019050919050565b82818337600083830152505050565b6000610afb610af684610aa8565b610a7e565b905082815260208101848484011115610b1757610b16610aa3565b5b610b22848285610ad9565b509392505050565b600082601f830112610b3f57610b3e610a9e565b5b8135610b4f848260208601610ae8565b91505092915050565b6000819050919050565b610b6b81610b58565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b600060408284031215610ba457610ba3610a08565b5b610bae6040610a7e565b9050600082013567ffffffffffffffff811115610bce57610bcd610a99565b5b610bda84828501610b2a565b6000830152506020610bee84828501610b79565b60208301525092915050565b600060208284031215610c1057610c0f6109fe565b5b600082013567ffffffffffffffff811115610c2e57610c2d610a03565b5b610c3a84828501610b8e565b91505092915050565b6000819050919050565b610c5681610c43565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cb1578082015181840152602081019050610c96565b60008484015250505050565b6000610cc882610c77565b610cd28185610c82565b9350610ce2818560208601610c93565b610ceb81610a0d565b840191505092915050565b60006020820190508181036000830152610d108184610cbd565b905092915050565b600060ff82169050919050565b610d2e81610d18565b8114610d3957600080fd5b50565b600081359050610d4b81610d25565b92915050565b610d5a81610c43565b8114610d6557600080fd5b50565b600081359050610d7781610d51565b92915050565b60008060008060808587031215610d9757610d966109fe565b5b600085013567ffffffffffffffff811115610db557610db4610a03565b5b610dc187828801610b8e565b9450506020610dd287828801610d3c565b9350506040610de387828801610d68565b9250506060610df487828801610d68565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2b82610e00565b9050919050565b610e3b81610e20565b82525050565b6000602082019050610e566000830184610e32565b92915050565b610e6581610e20565b8114610e7057600080fd5b50565b600081359050610e8281610e5c565b92915050565b600080600060608486031215610ea157610ea06109fe565b5b6000610eaf86828701610e73565b9350506020610ec086828701610b79565b925050604084013567ffffffffffffffff811115610ee157610ee0610a03565b5b610eed86828701610b2a565b9150509250925092565b600060208284031215610f0d57610f0c6109fe565b5b6000610f1b84828501610e73565b91505092915050565b610f2d81610b58565b82525050565b6000606082019050610f486000830186610c4d565b610f556020830185610c4d565b610f626040830184610f24565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fb157607f821691505b602082108103610fc457610fc3610f6a565b5b50919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061100b600283610fca565b915061101682610fd5565b600282019050919050565b6000819050919050565b61103c61103782610c43565b611021565b82525050565b600061104d82610ffe565b9150611059828561102b565b602082019150611069828461102b565b6020820191508190509392505050565b61108281610d18565b82525050565b600060808201905061109d6000830187610c4d565b6110aa6020830186611079565b6110b76040830185610c4d565b6110c46060830184610c4d565b95945050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261112f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110f2565b61113986836110f2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061117661117161116c84610b58565b611151565b610b58565b9050919050565b6000819050919050565b6111908361115b565b6111a461119c8261117d565b8484546110ff565b825550505050565b600090565b6111b96111ac565b6111c4818484611187565b505050565b5b818110156111e8576111dd6000826111b1565b6001810190506111ca565b5050565b601f82111561122d576111fe816110cd565b611207846110e2565b81016020851015611216578190505b61122a611222856110e2565b8301826111c9565b50505b505050565b600082821c905092915050565b600061125060001984600802611232565b1980831691505092915050565b6000611269838361123f565b9150826002028217905092915050565b61128282610c77565b67ffffffffffffffff81111561129b5761129a610a1e565b5b6112a58254610f99565b6112b08282856111ec565b600060209050601f8311600181146112e357600084156112d1578287015190505b6112db858261125d565b865550611343565b601f1984166112f1866110cd565b60005b82811015611319578489015182556001820191506020850194506020810190506112f4565b868310156113365784890151611332601f89168261123f565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461137881610f99565b611382818661134b565b9450600182166000811461139d57600181146113b2576113e5565b60ff19831686528115158202860193506113e5565b6113bb85611356565b60005b838110156113dd578154818901526001820191506020810190506113be565b838801955050505b50505092915050565b60006113fa828461136b565b915081905092915050565b600060a08201905061141a6000830188610c4d565b6114276020830187610c4d565b6114346040830186610c4d565b6114416060830185610f24565b61144e6080830184610e32565b9695505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061149161148c61148784611458565b611151565b611462565b9050919050565b6114a181611476565b82525050565b60006020820190506114bc6000830184611498565b9291505056fea264697066735822122086d596ec84d41be78a6fdd4105b10ace8a915f5f7777991363e936f94c3582de64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806354fd4d501161007157806354fd4d5014610156578063715018a614610174578063802708f51461017e57806381d60956146101ae5780638da5cb5b146101ca578063f2fde38b146101e8576100a9565b806304d41a81146100ae57806306fdde03146100de57806320606b70146100fc5780633003aa5c1461011a5780633644e51514610138575b600080fd5b6100c860048036038101906100c39190610bfa565b610204565b6040516100d59190610c5c565b60405180910390f35b6100e6610267565b6040516100f39190610cf6565b60405180910390f35b6101046102a0565b6040516101119190610c5c565b60405180910390f35b6101226102c4565b60405161012f9190610c5c565b60405180910390f35b6101406102e8565b60405161014d9190610c5c565b60405180910390f35b61015e6102ee565b60405161016b9190610cf6565b60405180910390f35b61017c61037c565b005b61019860048036038101906101939190610d7d565b610390565b6040516101a59190610e41565b60405180910390f35b6101c860048036038101906101c39190610e88565b610427565b005b6101d261066f565b6040516101df9190610e41565b60405180910390f35b61020260048036038101906101fd9190610ef7565b6106a7565b005b60007fb462ca2d10c33fd64fabd08be03d02973369ae65ed280324b0f5397012ac4165826000015180519060200120836020015160405160200161024a93929190610f33565b604051602081830303815290604052805190602001209050919050565b6040518060400160405280600681526020017f454950373132000000000000000000000000000000000000000000000000000081525081565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7fb462ca2d10c33fd64fabd08be03d02973369ae65ed280324b0f5397012ac416581565b60005481565b600180546102fb90610f99565b80601f016020809104026020016040519081016040528092919081815260200182805461032790610f99565b80156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b505050505081565b61038461072d565b61038e60006107b4565b565b60008061039c86610204565b905060008054826040516020016103b4929190611042565b604051602081830303815290604052805190602001209050600181878787604051600081526020016040526040516103ef9493929190611088565b6020604051602081039080840390855afa158015610411573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b600061043161088b565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561047f5750825b9050600060018367ffffffffffffffff161480156104b4575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156104c2575080155b156104f9576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156105495760018560000160086101000a81548160ff0219169083151502179055505b6105528861089f565b85600190816105619190611279565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600681526020017f45495037313200000000000000000000000000000000000000000000000000008152508051906020012060016040516105cf91906113ee565b604051809103902089306040516020016105ed959493929190611405565b6040516020818303038152906040528051906020012060008190555083156106655760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161065c91906114a7565b60405180910390a15b5050505050505050565b60008061067a6108b3565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6106af61072d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107215760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107189190610e41565b60405180910390fd5b61072a816107b4565b50565b6107356108db565b73ffffffffffffffffffffffffffffffffffffffff1661075361066f565b73ffffffffffffffffffffffffffffffffffffffff16146107b2576107766108db565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107a99190610e41565b60405180910390fd5b565b60006107be6108b3565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000806108966108e3565b90508091505090565b6108a761090e565b6108b08161094e565b50565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600033905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b6109166109d4565b61094c576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61095661090e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109c85760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109bf9190610e41565b60405180910390fd5b6109d1816107b4565b50565b60006109de61088b565b60000160089054906101000a900460ff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a5682610a0d565b810181811067ffffffffffffffff82111715610a7557610a74610a1e565b5b80604052505050565b6000610a886109f4565b9050610a948282610a4d565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610ac357610ac2610a1e565b5b610acc82610a0d565b9050602081019050919050565b82818337600083830152505050565b6000610afb610af684610aa8565b610a7e565b905082815260208101848484011115610b1757610b16610aa3565b5b610b22848285610ad9565b509392505050565b600082601f830112610b3f57610b3e610a9e565b5b8135610b4f848260208601610ae8565b91505092915050565b6000819050919050565b610b6b81610b58565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b600060408284031215610ba457610ba3610a08565b5b610bae6040610a7e565b9050600082013567ffffffffffffffff811115610bce57610bcd610a99565b5b610bda84828501610b2a565b6000830152506020610bee84828501610b79565b60208301525092915050565b600060208284031215610c1057610c0f6109fe565b5b600082013567ffffffffffffffff811115610c2e57610c2d610a03565b5b610c3a84828501610b8e565b91505092915050565b6000819050919050565b610c5681610c43565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cb1578082015181840152602081019050610c96565b60008484015250505050565b6000610cc882610c77565b610cd28185610c82565b9350610ce2818560208601610c93565b610ceb81610a0d565b840191505092915050565b60006020820190508181036000830152610d108184610cbd565b905092915050565b600060ff82169050919050565b610d2e81610d18565b8114610d3957600080fd5b50565b600081359050610d4b81610d25565b92915050565b610d5a81610c43565b8114610d6557600080fd5b50565b600081359050610d7781610d51565b92915050565b60008060008060808587031215610d9757610d966109fe565b5b600085013567ffffffffffffffff811115610db557610db4610a03565b5b610dc187828801610b8e565b9450506020610dd287828801610d3c565b9350506040610de387828801610d68565b9250506060610df487828801610d68565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2b82610e00565b9050919050565b610e3b81610e20565b82525050565b6000602082019050610e566000830184610e32565b92915050565b610e6581610e20565b8114610e7057600080fd5b50565b600081359050610e8281610e5c565b92915050565b600080600060608486031215610ea157610ea06109fe565b5b6000610eaf86828701610e73565b9350506020610ec086828701610b79565b925050604084013567ffffffffffffffff811115610ee157610ee0610a03565b5b610eed86828701610b2a565b9150509250925092565b600060208284031215610f0d57610f0c6109fe565b5b6000610f1b84828501610e73565b91505092915050565b610f2d81610b58565b82525050565b6000606082019050610f486000830186610c4d565b610f556020830185610c4d565b610f626040830184610f24565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fb157607f821691505b602082108103610fc457610fc3610f6a565b5b50919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061100b600283610fca565b915061101682610fd5565b600282019050919050565b6000819050919050565b61103c61103782610c43565b611021565b82525050565b600061104d82610ffe565b9150611059828561102b565b602082019150611069828461102b565b6020820191508190509392505050565b61108281610d18565b82525050565b600060808201905061109d6000830187610c4d565b6110aa6020830186611079565b6110b76040830185610c4d565b6110c46060830184610c4d565b95945050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261112f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110f2565b61113986836110f2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061117661117161116c84610b58565b611151565b610b58565b9050919050565b6000819050919050565b6111908361115b565b6111a461119c8261117d565b8484546110ff565b825550505050565b600090565b6111b96111ac565b6111c4818484611187565b505050565b5b818110156111e8576111dd6000826111b1565b6001810190506111ca565b5050565b601f82111561122d576111fe816110cd565b611207846110e2565b81016020851015611216578190505b61122a611222856110e2565b8301826111c9565b50505b505050565b600082821c905092915050565b600061125060001984600802611232565b1980831691505092915050565b6000611269838361123f565b9150826002028217905092915050565b61128282610c77565b67ffffffffffffffff81111561129b5761129a610a1e565b5b6112a58254610f99565b6112b08282856111ec565b600060209050601f8311600181146112e357600084156112d1578287015190505b6112db858261125d565b865550611343565b601f1984166112f1866110cd565b60005b82811015611319578489015182556001820191506020850194506020810190506112f4565b868310156113365784890151611332601f89168261123f565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461137881610f99565b611382818661134b565b9450600182166000811461139d57600181146113b2576113e5565b60ff19831686528115158202860193506113e5565b6113bb85611356565b60005b838110156113dd578154818901526001820191506020810190506113be565b838801955050505b50505092915050565b60006113fa828461136b565b915081905092915050565b600060a08201905061141a6000830188610c4d565b6114276020830187610c4d565b6114346040830186610c4d565b6114416060830185610f24565b61144e6080830184610e32565b9695505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061149161148c61148784611458565b611151565b611462565b9050919050565b6114a181611476565b82525050565b60006020820190506114bc6000830184611498565b9291505056fea264697066735822122086d596ec84d41be78a6fdd4105b10ace8a915f5f7777991363e936f94c3582de64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 536,
        "contract": "contracts/EIP712.sol:EIP712",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 538,
        "contract": "contracts/EIP712.sol:EIP712",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}